[해피해피 월요일]

1.mothod( 함수 = function)134~142
 :역할별로 작업분산
 :반복되는 작업
 (사진)C:\Users\Canon\Desktop\공부 사진 모음
 
*void : 아무 것도 없다.
*메소드 생성
ex)static void method () {
		System.out.println("method 실행");
*메소드 호출
method(); 를 main함수 안에서 입력

*method가 main보다 위에있든 밑에있든 위치는 상관이 없다.

*인자(=args, =인수 )가 필요한 경우 ex) add(a, b) ;//인자와 반환 클래스
 :메소드를 호출하는 곳의 데이타를 호출된 메소드 내에서 필요하다면 메소드를 호출할 때 인자로 넘겨줘야 한다.
ex) add(a, b); <-main 함수에 입력되는 부분
 :메소드에서는 넘어오는 데이타를 받은 변수를 같은 자료형으로 선언을 해놓아야 한다.
ex) static void add(int a, int b) -인자를 내가 만든 메소드 함수 ( ) 안에 데이터 형이랑 같이 입력,
 {
		//입력받은 데이타의 합을 구해서 출력
		int sum=a+b;
		System.out.println("합:" +sum);	}

*return반환을 사용하는 이유 
: 함수의 { }가 끝나기전에 값을 반환하기 위해서 return을 씀
:return을 사용하고 나서 그 뒤는 실행하지 않고 다시 main으로 돌아간다.

*인자의 데이터형은 그 함수가 반환하는 데이터형이랑 상관이 없다.

*2가지 이상의 값을 반환하고 싶을 때 배열을 사용한다.(클래스 인자와 반환3)
1)return arr; //int [] arr의 모든 값을 반환한다.
2)반환 값이 int형 배열 이므로  함수 데이터 형은 static int[] 함수명

*함수안에서 쓰는 애들은 함수안에서 밖에 못 논다. 그래서 나중에 함수안에 메모리는 없어지고 반환한 값만 남는다.

*명명규칙
 * 1. 문자 + 숫자 + _ + $ 조합
 * 2. 길이 제한 없음
 * 3. 첫글자에 숫자만 아니면 됨
 * 4. 대소문자 구별
 * 5. 예약어(keyword)는 안됨
 * 
 * 권장사항
 *  -클래스명의 첫글자는ㄴ 대문자시작
 *  -변수와 메소드명은 소문자로 시작
 *  -라벨명은 전부 대문자
 *  -패키지명은 전부 소문자

*JVM (Java Virtual Mashine)
-가장 먼저 무조건  main 함수를 찾음
-virtual 머신은 내가 만든 함수를 못찾아서 내가 main 함수 안에서 불러줘야함
-함수를 부르면 함수가 있는 { } 으로 가서 실행하고 { }이 끝나면 다시 함수를 불렀던 함수가 있는 그 위치로 간다.
-main 함수가 끝나는 { }을 만나면 JVM에게 전달 해서 끄읏!

*java main 함수가 static이기 때문에 static 아니면 못 쓴다.
-main도 내가 만든 함수도 stataic으로 선언
ex)static void method ()	

*함수에 값을 반환하면 인자에 있던 데이터는 다 날아간다. 

*Scanner char형태 
char ch=input.next().charAt(0);

*소문자, 대문자 변환
 i)소문자(ASCII코드표 97~122) 대문자(65~90) 차이가 32만큼 난다.
 ii)toUpperCase() : 문자열을 모두 대문자로 변환해준다.
   ex)변수.toUpperCase();                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  b    
   toLoertCase() : 문자열을 모두 소문자로 변환해준다.
 iii)문자열을 받은걸 char형에 저장하고 싶다면?
    변수.toUpperCase().charAt(위치);

*멤버 변수
:main, 함수 둘 다에서 변수를 쓰고 싶을 때 main 밖에서 변수 선언 
main밖에서 변수 선언할 때 static을 앞에 붙여줘야한다.
:메모리 영역 중 heap에서 자리잡는다.
:멤버변수 보다 지역변수가 우선순위가 높다.

*call by value
:메소드의 인자가 기본형인 경우 -> 값만 복사됨

*call by reference 
:메소드의 인자가 참조형인 경우 ;주소값을 복사해서 보낸다.
:그래서 함수를 거치고 나면 원본이 수정된 것이 그대로 적용된다.

*string class는 별종이다. 근데 결국 따지면 참조형이긴 하나 결관느 참조형 인자와 같이 안나온다.
 :call by reference 이나. 값은 call by value 처럼 나온다. string class 자체 특성상 그렇다.
 :그냥 별종이라고 생각해야합니다.

*배열을 반환하고 main에서 받을 때 (int arr[3][5];)
 반환 할 때 : return arr;
 main에서 받을  때 : int [][]arr2=함수()
 함수명 : static int[][] 함수명( )
