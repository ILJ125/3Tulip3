목요일 행복해 
0.static
1.inner class
2.접근지정자
	-private
	-public
	-default(아무것도 표시 없음)
	-protected
3.상속관계 -다형성
--------------------------------------------------------------------
0.static

*왼쪽 상단을 0.0 이다. x좌표는 오른쪽으로 y좌표는 아래로
class Baduk{
	int x,y;    //좌표	
	Color c;  //색상
	double r;//반지름; 모든 바둑알의 크기를 관장하는 반지름의 길이를 모든 바둑알이 일치하게 설정하고싶다
		//반지름을 공유해야한다. - static
		//static을 붙이면 반지름은 메모리에 하나만 잡힌다. 
		//왜냐하면 static은 따로 메모리를 관리하기 때문이다.

ex2) 그림으로 노트에 표현해!!!!
Test t1= new Test();
Test t2= new Test(); 

class Test {
   int a = 10;
   static int b =20;

  void a_hamsu(){
	a=1;
	b=2;
  }

  static b_hamsu(){
	a=11;
	b=22;
  }
}
//static은 먼저 메모리에 올라와있다.
//멤버변수와 클래스는 new 객체생성 했을 때 메모리에 올라옵니다.
//그래서 먼저 올라온 static메소드에서 일반 멤버 변수 접근이 안됨(static은 static만)
//단 객체가 생성된 일반 멤버변수에는 접근 가능하다잉

*static 변수 = 클래스 변수라고 한다.

*객체 =instance 
*객체 안에 변수 = 멤버 변수

*static 변수는 static 변수에만  접근 할 수 있음

*싱글 톤 패턴 이 클래스 객체 생성을 하나만 할 수있게 해놓은 거 : e_static_sample

1.InnerClass
:클래스 안에 클래스가 있는 것
:밖에 클래스가 안에 클래스가 멤버 변수처럼 취급된다.
:메인에서 InnerClass를 사용 할려면
ex)
Outer o=new Outer();
Outer.Inner in =o.new Inner();//이렇게 써야하는 거야 외워 그냥
in.naJabara();
//먼저 밖에 클래스 객체 생성해주고
//안에 클래스 객체생성해주고
//안에 클래스의 함수를 가져와서 쓸 수 있음
*이너클래스는 bin 파일 즉 컴퓨터가 인식하기에 Outer$Inner(inner class 이름) 이렇게 저장된다.
*멤버 변수처럼 취급 되니깐 static도 붙여 사용 할 수 있다.

2.접근지정자
private : 그 클래스에서만 허용
default : 그 팩키지에서 허용
protected : 다른 팩키지에서는 상속관계인 경우 (동일한 팩키지 허용)
public : 모든 접근 허용

*코딩
private	  String a = "프라이빗 데이타";
public    String b = "퍼블릭 데이타";
protected String c = "프로텍티드 데이타";
	  String d = "디폴트 데이타";

*같은 패키지 안에서
-프라이빗은 접근이 안됨 에러뜬다
에러명:The field Access.a is not visible
-프로텍티드, 퍼블릭, 디폴트 다 가능

*다른 패키지에서
-다른 패키지에서 클래스를 사용하고 싶은때는 import로 그 클래스를 사용한다고 해줘야한다.
 ex)import g_access.sub.Access;
-파라이빗, 프로텍티드,디폴트 못찾음
-퍼블릭만 찾을 수있다.
-단 프로텍티드는 부모 자식 관계가 있을 때 가져와서 사용할 수 있다.
 ex)public class SubClassMain  extends Access{
	public static void main(String[] args) {
	}
    }

*main이 static이다 그래서 main { }밖에서 멤버 변수를 선언해주기 위해서 멤버 변수에 static을 적용한거다.

*static이랑 public은 아예 별개의 문제이다.

3.상속-다형성
<개발자 관점>
1.부모가 가진걸 막 사용하고 싶어서 상속 관계를맺으므
2.부모클래스에 없는 경우 그냥 추가해서 새로 만들어서 쓰면되
3.부모 클래스에 있어 근데 나랑 안맞아 overriding 개념을 써야함 (overriding 하면 자식클래스꺼 불러오기 때문에) 

<설계시>
1.공통요소를 부모 클래스에 넣는다
2.고유요소를 자식 클래스에 넣는다.

*기본적 사용
ex) public class Ddal  extends Umma
 -extends Umma로 Umma클래스가 엄마 클래스가 됩니다. 상속 형태가 됩니다.

*메인에서 딸 함수만 객체 생성을 해줄 때
-엄마 메모리먼저 만들고 딸 메모리를 만든다. (객체 생성). 즉 객체생성할 때 딸려있던 부모 메모리 다 객체 생성한다.
 ex)Ddal d =new Ddal(); 순간 엄마 메모리,딸 메모리 만듬
-딸 클래스의 생성자 함수가 돌아가면 자동으로 자식 생성자 함수 안에 첫줄에 super()가 코딩이 된다.
-메모리가 만들어졌으니 딸 클래스형 변수명으로 엄마클래스 안에 함수를 불러 올 수 있다.
 ex)d.job(); 엄마 메모리 안에 job()함수를 불러올 수있다.

*메인에서 엄마 함수만 객체 생성을 해줄 때
-엄마 클래스만 객체 생성 해줌
-그래서 엄마 클래스 안에있는 것만 사용 할 수 있다.

*엄마 변수에 자식 객체 생성 가능
-자식 객체 생성 하면 엄마 객체도  딸려서 생성되기에 가능
ex) Umma u =new Ddal(); 


*overriding 
: 상속 관계에서 인자와 반환값까지 전부 동일한 함수들 접근지정자는 자식이 더 크거나 같거나 private<default<protected<public
: 자바는 딸, 엄마 둘다 같은 함수를 가지고 있을 때 딸 함수만 쓴다. 

*객체임을 확인 하기 위해서 d가 Ddal 클래스에 객체이니? instanceof 사용
ex)d instanceof Ddal = true 

*형변환//그림 정리 하자
Ddal c = new Ddal(); 
Umma d = (Umma)c; //딸이 부모로 형변환 up-casting
Ddal e = (Ddal)d;//부모가 딸로 형변환 down-casting
-Ddal 클래스 객체 생성시 부모 객체도 같이 만든다.
-d는 딸 객체인데 Umma d =(Umma)c; //Umma형 d 변수에 딸 객체주소를 복사해서 엄마객체 부분만 쓸게
-Ddal e = (Ddal)d; Ddal형 e 변수에 엄마형이던 d의 주소를 복사해서 Ddal 부분만 사용 (맨처음 d 딸객체에서 주소복사해온거라서 가능)
 왜냐하면 원래 d가 엄마객체,딸객체 다있는 메모리를 받은 것이기 때문에

*자바는 부모가 한명만 된다. 다중 상속 안된다.

*has a 관계 is a 관계
-has-a 관계
;객체 생성해서 사용하는 관계
;MyFrame1 has a Frame
-is a 관계
;상속 관계
;MyFrame2 is a Frame

*다향성
:코딩은 하나 경우에 따라서 다양한 결과가 출력된다.
1.부모변수에 자식객체 생성 해야합니다.
2.오버라이딩 되어 있어야 합니다.
ex) i.output();
//i는 부모 클래스인 아이템의 변수 인데 자식 객체를 생성을 따로 했다.
//output()함수는 오버라이딩으로 작성되어있다.
//자식의 output을 호출 Book,Dvd,Cd ;

*this 내 클래스에 멤버 변수라고 지칭 하는건데 부모랑 자식 둘다 같은 이름에 멤버변수를 갖고있을 때
 -자신 객체를 지칭하는 레퍼런스(주소):this
 -부모 객체를 지칭하는 레퍼런스(주소):super

*this() 다른 생성자함수를 호출 할때
 super()부모 생성자 함수를 호출 할 때
-둘다 무조건 첫번째 줄에 와야 한다.
=====================================================
*awt : 화면 관련된거 //  import java.awt.*; 
ex)
Frame f; //awt안에 클래스
MyFrame1()//생성자 함수
{
 	f=new Frame("나의 첫 화면");//창 이름
	f.setSize(500,300);//픽셀  단위
	f.setVisible(true);//화면에 띄울래? 안띄울래?
	}
}

*함수명(args) => 그 클래스가 가지고 있는 모든 멤버변수를 인자로 받는 함수를 만들어라


